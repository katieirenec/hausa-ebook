<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_four-one">
  <title>Introduction to Decision Structures</title>

<tabular top="medium">
    <row bottom="medium"  left="medium">
      <cell  right="medium">
        Learning Objectives: 
          Student will be able to...
          <ul>
              <li>understand why decision structures are important</li >
              <li>identify a situation where a decision structure would be helpful</li>
            </ul > 
      </cell>
    </row>
  </tabular>
  <p>
   In this chapter we will explore the concept of decision structures. 
   We will look at what it means to include such a structure in your program, the different components that make up the structure, what the pseudo-implementation of it looks like, and how we can implement it ourselves in C++.
    Lastly, this chapter will conclude with examples and practice problems to help further your understanding of the body of the chapter. 
  </p>

  <p>
    Imagine you want your program to execute a piece of code but only under certain conditions. For example, Haider wants to help his sister, Maimina, with her cafe. To promote her business Maimina offers discounts to customers that spend â‚¦5000 or more. Haider decided to create a program that prints a discount code for customers that qualify for the discount. Customers can then use their code on future purchases.
  </p>

  <term>How did Haider achieve this?</term>

  <p>
    
The structure Haider implemented in his code is called a decision structure. A decision structure is different from a sequence structure in that every line is not executed one after the other from top to bottom. Decision structures allow for decisions to be made on which lines of code to execute. The concept behind this flow of logic is to allow for certain segments to be run under certain conditions. Take this for instance, as Ali is walking back from school if he sees a rock in the path he walks around it. Ali walking back from school is the sequence structure as we have learned in chapter 2. He keeps walking step by step in sequential order however under the condition he sees a rock the sequence changes and he walks around it. Decision Structures can be implemented anywhere that requires a decision to be made. 

  </p>

  <figure>
      <image source="ifstatementdiagram.png" width="50%">
      </image>
    </figure>

<exercises>
   <exercise label="tf-decision structure">
  <title>True or False</title>
  <statement correct="no">
    <p>
      Every statement in a decision structure is executed by the program
    </p>
  </statement>
  <feedback>
    <p>
      Why do we have decision structures?
    </p>
  </feedback>
  <!-- <hint>
    <p>
    
    </p>
  </hint> -->
</exercise>
<exercisegroup> 
<introduction>
  <p>
    To complete the following activities select the correct answer to the question
  </p>
</introduction>
<exercise label="multiple-choice-decision-structure">
  <title>Multiple-Choice</title>
  <statement>
    <p>
      Which scenario is best suited for a decision structure?
    </p>
  </statement>
  <choices randomize="yes">
    <choice correct="yes">
      <statement>
        <p>
          Your program takes user input that is different every time
        </p>
      </statement>
      <!-- <feedback>
        <p>
          Green means
        </p>
      </feedback> -->
    </choice>
    <choice>
      <statement>
        <p>
          Your program uses the same variables and values every time it is run
        </p>
      </statement>
    </choice>
    <choice>
      <statement>
        <p>
          Your program takes user input but needs to execute every statement
        </p>
      </statement>
    </choice>
  </choices>
</exercise>
<exercise label="multiple-choice-decision-structure-2">
  <title>Multiple-Choice</title>
  <statement>
    <p>
      Which of the following is INCORRECT?
    </p>
  </statement>
  <choices randomize="yes">
    <choice>
      <statement>
        <p>
          Programs with decision structures can also incorporate sequential structures in them
        </p>
      </statement>
      <!-- <feedback>
        <p>
          Green means
        </p>
      </feedback> -->
    </choice>
    <choice>
      <statement>
        <p>
          Decision structures allow for a decision to be made in order to determine the code to execute
        </p>
      </statement>
    </choice>
    <choice correct="yes">
      <statement>
        <p>
          You can only have one decision structure in your program
        </p>
      </statement>
    </choice>
  </choices>
</exercise>
</exercisegroup>
</exercises>

</section>